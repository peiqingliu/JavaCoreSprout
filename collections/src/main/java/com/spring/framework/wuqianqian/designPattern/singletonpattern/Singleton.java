package com.spring.framework.wuqianqian.designPattern.singletonpattern;

/**
 *
 * 1.1 定义
 * 保证一个类仅有一个实例，并提供一个访问它的全局访问点。
 *
 * 1.2 为什么要用单例模式呢？
 * 在我们的系统中，有一些对象其实我们只需要一个，比如说：线程池、缓存、对话框、注册表、日志对象、充当打印机、显卡等设备驱动程序的对象。事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，比如：程序的行为异常、资源使用过量、或者不一致性的结果。
 *
 * 简单来说使用单例模式可以带来下面几个好处:
 *
 * 对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；
 * 由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。
 *
 *
 * 1.3 为什么不使用全局变量确保一个类只有一个实例呢？
 * 我们知道全局变量分为静态变量和实例变量，静态变量也可以保证该类的实例只存在一个。
 * 只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。
 *
 * 但是，如果说这个对象非常消耗资源，而且程序某次的执行中一直没用，这样就造成了资源的浪费。
 * 利用单例模式的话，我们就可以实现在需要使用时才创建对象，这样就避免了不必要的资源浪费。
 * 不仅仅是因为这个原因，在程序中我们要尽量避免全局变量的使用，大量使用全局变量给程序的调试、维护等带来困难。

 *
 *
 *
 * 饿汉方式。指全局的单例实例在类装载时构建
 * 所谓 “饿汉方式” 就是说JVM在加载这个类时就马上创建此唯一的单例实例，
 * 不管你用不用，先创建了再说，如果一直没有被使用，便浪费了空间，典型的空间换时间，每次调用的时候，就不需要再判断，节省了运行时间。
 * @author liupeqing
 * @date 2019/2/13 18:43
 */
public class Singleton {

    //在静态初始化器中创建单例实例，这段代码保证了线程安全
    private static Singleton uniqueInstance = new Singleton();

    //私有构造函数
    //Singleton类只有一个构造方法并且是被private修饰的，所以用户无法通过new方法创建该对象实例
    private Singleton(){}

    //通过静态方法获取实例
    private static Singleton getUniqueInstance(){
        return uniqueInstance;
    }


}
